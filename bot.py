import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "8238890929:AAG3tnUSJc4YY4xyZQJXeRNWEQPUW4rg2VM"

# ID –∞–¥–º–∏–Ω–∞
ADMIN_ID = 437753009

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
user_data = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data[user_id] = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –†–µ–º–ü–ª—é—Å.\n\nüì± –ù–∞–ø–∏—à–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
    )
    user_data[user_id]["step"] = "waiting_model"


# üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    # –û–∂–∏–¥–∞–µ–º –º–æ–¥–µ–ª—å
    if user_data.get(user_id, {}).get("step") == "waiting_model":
        user_data[user_id]["model"] = text
        user_data[user_id]["step"] = "waiting_problem"
        await update.message.reply_text(
            "‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è¬ª, ¬´—Ä–∞–∑–±–∏—Ç —ç–∫—Ä–∞–Ω¬ª)."
        )
        return

    # –û–∂–∏–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É
    if user_data.get(user_id, {}).get("step") == "waiting_problem":
        user_data[user_id]["problem"] = text
        problem = text.lower()

        if "—ç–∫—Ä–∞–Ω" in problem or "–¥–∏—Å–ø–ª–µ–π" in problem:
            await update.message.reply_text(
                "üí° –ó–∞–º–µ–Ω–∞ —ç–∫—Ä–∞–Ω–∞ ‚Äî –æ—Ç 3000 ‚ÇΩ, —Å—Ä–æ–∫ 1 –¥–µ–Ω—å.\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üõí –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="order")]]
                ),
            )
        elif "–∑–∞—Ä—è–¥" in problem or "—Ä–∞–∑—ä–µ–º" in problem or "–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è" in problem:
            await update.message.reply_text(
                "üîå –ó–∞–º–µ–Ω–∞ —Ä–∞–∑—ä—ë–º–∞ –∑–∞—Ä—è–¥–∫–∏ ‚Äî –æ—Ç 2000 ‚ÇΩ, —Å—Ä–æ–∫ 1 –¥–µ–Ω—å.\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üõí –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="order")]]
                ),
            )
        else:
            await update.message.reply_text(
                "üîé –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üõí –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="order")]]
                ),
            )

        user_data[user_id]["step"] = "done"
        return


# üõí –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    name = query.from_user.first_name
    model = user_data.get(user_id, {}).get("model", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    problem = user_data.get(user_id, {}).get("problem", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ üìû")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    msg = f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\nüë§ {name}\nüì± {model}\n‚ùå {problem}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)


# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    port = int(os.environ.get("PORT", 10000))
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://telegram-bot-80zy.onrender.com/{TOKEN}"
    )


if __name__ == "__main__":
    main()