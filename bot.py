import os
import json
import math
import threading
from flask import Flask
from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler, 
    filters, 
    ContextTypes
)

# === Flask-–∑–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç ===
app = Flask(__name__)

@app.route("/")
def home():
    return "‚úÖ Bot is running on Render!"

def run_flask():
    port = int(os.environ.get("PORT", 10000))  # Render –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT
    app.run(host="0.0.0.0", port=port)

# === –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–∑—ä—ë–º–æ–≤ ===
with open("connectors.json", encoding="utf-8") as f:
    CONNECTORS = json.load(f)

# === –¢–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN")
OWNER_LINK = "https://t.me/ermakov_remont"
ADMIN_ID = 437753009   # —Ç–≤–æ–π ID, –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞
USER_CONTEXT = {}

# === –§—É–Ω–∫—Ü–∏–∏ ===
def round_up_to_100(x):
    return int(math.ceil(x / 100.0)) * 100

def calculate_price(model: str, repair_type: str) -> str:
    model_lower = model.lower()
    connector = None

    for key, conn in CONNECTORS.items():
        if key.lower() in model_lower:
            connector = conn
            break

    if not connector and "iphone" in model_lower:
        connector = "Lightning"

    if not connector:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ —Ä–∞–∑—ä—ë–º."

    if repair_type == "—ç–∫—Ä–∞–Ω":
        total = round_up_to_100(3000)  # + —Ü–µ–Ω–∞ –¥–µ—Ç–∞–ª–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä)
        return f"üí° –ó–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è –¥–ª—è {model}: {total} ‚ÇΩ (—Å—Ä–æ–∫ 1 –¥–µ–Ω—å)"

    if repair_type == "–±–∞—Ç–∞—Ä–µ—è":
        if "iphone" in model_lower:
            total = round_up_to_100(2500)
        else:
            total = round_up_to_100(2000)
        return f"üîã –ó–∞–º–µ–Ω–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è {model}: {total} ‚ÇΩ (—Å—Ä–æ–∫ 1 –¥–µ–Ω—å)"

    if repair_type == "—Ä–∞–∑—ä–µ–º":
        if connector == "MicroUSB":
            total = round_up_to_100(1200)
        elif connector == "Type-C":
            total = round_up_to_100(2000)
        else:
            total = "–ü–æ –∑–∞–ø—Ä–æ—Å—É"
        return f"üîå –ó–∞–º–µ–Ω–∞ —Ä–∞–∑—ä—ë–º–∞ ({connector}) –¥–ª—è {model}: {total} ‚ÇΩ (—Å—Ä–æ–∫ 1 –¥–µ–Ω—å)"

    return f"‚ÑπÔ∏è {model} ({connector}) ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫—É—é —É—Å–ª—É–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å."

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û –Ω–∞—Å", "–ü–æ–º–æ—â—å", "–°–≤—è–∑–∞—Ç—å—Å—è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –†–µ–º–ü–ª—é—Å.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.lower()

    if "–æ –Ω–∞—Å" in text:
        await update.message.reply_text("üë®‚Äçüîß –†–µ–º–ü–ª—é—Å ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤.\n–¢–µ–ª–µ—Ñ–æ–Ω: +79120412121")
        return
    if "–ø–æ–º–æ—â—å" in text:
        await update.message.reply_text("‚ùì –ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É—Å–ª—É–≥—É (—ç–∫—Ä–∞–Ω, –±–∞—Ç–∞—Ä–µ—è, —Ä–∞–∑—ä—ë–º), –∞ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é —Ü–µ–Ω—É.")
        return
    if "—Å–≤—è–∑–∞—Ç—å—Å—è" in text:
        await update.message.reply_text(f"üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: {OWNER_LINK}")
        return

    # –ú–æ–¥–µ–ª—å
    if any(b in text for b in ["iphone", "samsung", "xiaomi", "huawei", "honor", "realme", "oppo", "infinix", "tecno"]):
        if user_id not in USER_CONTEXT:
            USER_CONTEXT[user_id] = {"model": None, "service": None}
        USER_CONTEXT[user_id]["model"] = update.message.text
        if USER_CONTEXT[user_id]["service"]:
            price = calculate_price(USER_CONTEXT[user_id]["model"], USER_CONTEXT[user_id]["service"])
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="order")]])
            await update.message.reply_text(price, reply_markup=keyboard)
        else:
            await update.message.reply_text(f"üì± –ú–æ–¥–µ–ª—å: {update.message.text}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —É—Å–ª—É–≥—É (—ç–∫—Ä–∞–Ω, –±–∞—Ç–∞—Ä–µ—è, —Ä–∞–∑—ä—ë–º).")
        return

    # –£—Å–ª—É–≥–∞
    service = None
    if "—ç–∫—Ä–∞–Ω" in text or "–¥–∏—Å–ø–ª–µ–π" in text:
        service = "—ç–∫—Ä–∞–Ω"
    elif "–±–∞—Ç–∞—Ä–µ" in text or "–∞–∫–∫—É–º" in text:
        service = "–±–∞—Ç–∞—Ä–µ—è"
    elif "—Ä–∞–∑—ä–µ–º" in text or "–∑–∞—Ä—è–¥" in text or "–ø–æ—Ä—Ç" in text:
        service = "—Ä–∞–∑—ä–µ–º"

    if service:
        if user_id not in USER_CONTEXT:
            USER_CONTEXT[user_id] = {"model": None, "service": None}
        USER_CONTEXT[user_id]["service"] = service
        if USER_CONTEXT[user_id]["model"]:
            price = calculate_price(USER_CONTEXT[user_id]["model"], USER_CONTEXT[user_id]["service"])
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="order")]])
            await update.message.reply_text(price, reply_markup=keyboard)
        else:
            await update.message.reply_text(f"‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {service}.")
        return

    await update.message.reply_text("‚ö° –ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É—Å–ª—É–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–º–µ–Ω–∞ —ç–∫—Ä–∞–Ω–∞ iPhone 12¬ª).")

# === Inline-–∫–Ω–æ–ø–∫–∏ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "order":
        USER_CONTEXT[query.from_user.id]["stage"] = "name"
        await query.message.reply_text("‚úçÔ∏è –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É!\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

async def order_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in USER_CONTEXT or "stage" not in USER_CONTEXT[user_id]:
        return

    stage = USER_CONTEXT[user_id]["stage"]

    if stage == "name":
        USER_CONTEXT[user_id]["name"] = text
        USER_CONTEXT[user_id]["stage"] = "phone"
        await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif stage == "phone":
        USER_CONTEXT[user_id]["phone"] = text
        name = USER_CONTEXT[user_id].get("name")
        phone = USER_CONTEXT[user_id].get("phone")
        model = USER_CONTEXT[user_id].get("model")
        service = USER_CONTEXT[user_id].get("service")

        card = (
            f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
            f"üë§ –ò–º—è: <b>{name}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n"
            f"üì± –ú–æ–¥–µ–ª—å: <b>{model}</b>\n"
            f"üõ† –£—Å–ª—É–≥–∞: <b>{service}</b>"
        )

        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tel:{phone}")]]
        )

        await context.bot.send_message(
            chat_id=ADMIN_ID, 
            text=card, 
            parse_mode="HTML", 
            reply_markup=keyboard
        )

        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        USER_CONTEXT[user_id] = {}

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app_tg = Application.builder().token(TOKEN).build()
    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app_tg.add_handler(CallbackQueryHandler(button_handler))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, order_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –∏ Telegram –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    threading.Thread(target=run_flask).start()
    app_tg.run_polling()

if __name__ == "__main__":
    main()