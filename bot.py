import json
import math
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–∑—ä—ë–º–æ–≤ ===
with open("connectors.json", encoding="utf-8") as f:
    CONNECTORS = json.load(f)

# === –¢–≤–æ–π —Ç–æ–∫–µ–Ω ===
import os
TOKEN = os.getenv("BOT_TOKEN")
OWNER_LINK = "https://t.me/ermakov_remont"

# === –ü—Ä–∞–≤–∏–ª–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ===
def round_up_to_100(x):
    return int(math.ceil(x / 100.0)) * 100

def calculate_price(model: str, repair_type: str) -> str:
    model_lower = model.lower()
    connector = None
    for key, conn in CONNECTORS.items():
        if key.lower() in model_lower:
            connector = conn
            break

    if not connector and "iphone" in model_lower:
        connector = "Lightning"

    if not connector:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ —Ä–∞–∑—ä—ë–º."

    if "—ç–∫—Ä–∞–Ω" in repair_type or "–¥–∏—Å–ø–ª–µ–π" in repair_type:
        base_price = 0  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–Ω—É –¥–µ—Ç–∞–ª–∏ —Å GreenSpark
        total = round_up_to_100(base_price + 3000)
        return f"üí° –ó–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è –¥–ª—è {model}: {total} ‚ÇΩ"

    if "–±–∞—Ç–∞—Ä–µ" in repair_type or "–∞–∫–∫—É–º" in repair_type:
        if "iphone" in model_lower:
            total = round_up_to_100(2500)
        else:
            total = round_up_to_100(2000)
        return f"üîã –ó–∞–º–µ–Ω–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è {model}: {total} ‚ÇΩ"

    if "—Ä–∞–∑—ä–µ–º" in repair_type or "–∑–∞—Ä—è–¥" in repair_type or "–ø–æ—Ä—Ç" in repair_type:
        if connector == "MicroUSB":
            total = round_up_to_100(1200)
        elif connector == "Type-C":
            total = round_up_to_100(2000)
        else:
            total = "–ü–æ –∑–∞–ø—Ä–æ—Å—É"
        return f"üîå –ó–∞–º–µ–Ω–∞ —Ä–∞–∑—ä—ë–º–∞ ({connector}) –¥–ª—è {model}: {total} ‚ÇΩ"

    return f"‚ÑπÔ∏è {model} ({connector}) ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫—É—é —É—Å–ª—É–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å."

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û –Ω–∞—Å", "–ü–æ–º–æ—â—å", "–°–≤—è–∑–∞—Ç—å—Å—è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –†–µ–º–ü–ª—é—Å.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if "–æ –Ω–∞—Å" in text:
        await update.message.reply_text("üë®‚Äçüîß –†–µ–º–ü–ª—é—Å ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤.\n–¢–µ–ª–µ—Ñ–æ–Ω: +79120412121")
        return
    if "–ø–æ–º–æ—â—å" in text:
        await update.message.reply_text("‚ùì –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ —Ü–µ–Ω–µ —Ä–µ–º–æ–Ω—Ç–∞: –∑–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è, –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞, —Ä–∞–∑—ä—ë–º–∞.")
        return
    if "—Å–≤—è–∑–∞—Ç—å—Å—è" in text:
        await update.message.reply_text(f"üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: {OWNER_LINK}")
        return

    if "–∑–∞–º–µ–Ω–∞" in text:
        if "—ç–∫—Ä–∞–Ω" in text or "–¥–∏—Å–ø–ª–µ–π" in text:
            service = "—ç–∫—Ä–∞–Ω"
        elif "–±–∞—Ç–∞—Ä–µ" in text or "–∞–∫–∫—É–º" in text:
            service = "–±–∞—Ç–∞—Ä–µ—è"
        elif "—Ä–∞–∑—ä–µ–º" in text or "–∑–∞—Ä—è–¥" in text or "–ø–æ—Ä—Ç" in text:
            service = "—Ä–∞–∑—ä–µ–º"
        else:
            service = "–¥—Ä—É–≥–æ–µ"

        words = update.message.text.split()
        model = " ".join(words[2:]) if len(words) > 2 else update.message.text
        price = calculate_price(model, service)
        await update.message.reply_text(price)
    else:
        await update.message.reply_text("‚ö° –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ: –∑–∞–º–µ–Ω–∞ —ç–∫—Ä–∞–Ω–∞, –±–∞—Ç–∞—Ä–µ–∏ –∏–ª–∏ —Ä–∞–∑—ä—ë–º–∞ + –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()

if __name__ == "__main__":
    main()