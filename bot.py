import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# üîë –¢–æ–∫–µ–Ω
TOKEN = os.environ.get("BOT_TOKEN")

# üåç Render URL
WEBHOOK_URL = "https://telegram-bot-80zy.onrender.com"

# üõ† –ê–¥–º–∏–Ω ID
ADMIN_ID = 437753009

# Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(TOKEN).build()

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
user_data = {}


# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –†–µ–º–ü–ª—é—Å.\n\n"
        "üì± –ù–∞–ø–∏—à–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–±–ª–µ–º—É."
    )


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.lower()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
    user_data[user_id] = {"problem": update.message.text}

    if "—ç–∫—Ä–∞–Ω" in text or "–¥–∏—Å–ø–ª–µ–π" in text:
        await update.message.reply_text(
            "üí° –ó–∞–º–µ–Ω–∞ —ç–∫—Ä–∞–Ω–∞ ‚Äî –æ—Ç 3000 ‚ÇΩ, —Å—Ä–æ–∫ 1 –¥–µ–Ω—å.\nüîß –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="order")]
            ])
        )

    elif "–∑–∞—Ä—è–¥" in text or "—Ä–∞–∑—ä–µ–º" in text or "–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è" in text:
        await update.message.reply_text(
            "üîå –ó–∞–º–µ–Ω–∞ —Ä–∞–∑—ä—ë–º–∞ –∑–∞—Ä—è–¥–∫–∏ ‚Äî –æ—Ç 2000 ‚ÇΩ, —Å—Ä–æ–∫ 1 –¥–µ–Ω—å.\nüîß –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="order")]
            ])
        )

    else:
        await update.message.reply_text(
            "üîé –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\nüîß –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="order")]
            ])
        )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "order":
        await query.message.reply_text("‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        user_data[user_id]["waiting_name"] = True


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id in user_data and user_data[user_id].get("waiting_name"):
        name = update.message.text
        problem = user_data[user_id].get("problem", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
        )

        # –ó–∞—è–≤–∫–∞ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                "üì© *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
                f"üë§ –ò–º—è: {name}\n"
                f"üì± –ü—Ä–æ–±–ª–µ–º–∞: {problem}\n"
                f"üÜî Telegram ID: {user_id}"
            ),
            parse_mode="Markdown"
        )

        user_data[user_id] = {}


def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{TOKEN}"
    )


if __name__ == "__main__":
    main()