import os
import threading
from flask import Flask
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# === Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ===
app = Flask(__name__)

@app.route("/")
def home():
    return "‚úÖ Bot is running on Render!"

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN")
OWNER_LINK = "https://t.me/ermakov_remont"
ADMIN_ID = 437753009
USER_CONTEXT = {}

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û –Ω–∞—Å", "–ü–æ–º–æ—â—å", "–°–≤—è–∑–∞—Ç—å—Å—è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –†–µ–º–ü–ª—é—Å.\n"
        "üì± –ù–∞–ø–∏—à–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–±–ª–µ–º—É.",
        reply_markup=reply_markup
    )

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ===
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    text_lower = text.lower()

    # --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—è–≤–∫–∏ ---
    if user_id in USER_CONTEXT and "stage" in USER_CONTEXT[user_id]:
        stage = USER_CONTEXT[user_id]["stage"]

        if stage == "name":
            USER_CONTEXT[user_id]["name"] = text
            USER_CONTEXT[user_id]["stage"] = "phone"
            await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            return

        elif stage == "phone":
            USER_CONTEXT[user_id]["phone"] = text
            name = USER_CONTEXT[user_id].get("name")
            phone = USER_CONTEXT[user_id].get("phone")
            problem = USER_CONTEXT[user_id].get("problem")

            card = (
                f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
                f"üë§ –ò–º—è: <b>{name}</b>\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n"
                f"üì± –ü—Ä–æ–±–ª–µ–º–∞: <b>{problem}</b>"
            )

            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üì© –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"tel:{phone}")]]
            )

            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=card,
                parse_mode="HTML",
                reply_markup=keyboard
            )

            await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
            USER_CONTEXT[user_id] = {}  # –æ—á–∏—Å—Ç–∫–∞
            return

    # --- –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞) ---
    if "–æ –Ω–∞—Å" in text_lower:
        await update.message.reply_text("üë®‚Äçüîß –†–µ–º–ü–ª—é—Å ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤.\n–¢–µ–ª–µ—Ñ–æ–Ω: +79120412121")
        return
    if "–ø–æ–º–æ—â—å" in text_lower:
        await update.message.reply_text("‚ùì –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´iPhone 12 —ç–∫—Ä–∞–Ω¬ª).")
        return
    if "—Å–≤—è–∑–∞—Ç—å—Å—è" in text_lower:
        await update.message.reply_text(f"üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: {OWNER_LINK}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
    USER_CONTEXT[user_id] = {"problem": text}

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª—É–≥—É
    if "—ç–∫—Ä–∞–Ω" in text_lower or "–¥–∏—Å–ø–ª–µ–π" in text_lower:
        reply = f"üí° –ó–∞–º–µ–Ω–∞ —ç–∫—Ä–∞–Ω–∞ ‚Äî –æ—Ç 7000 ‚ÇΩ, —Å—Ä–æ–∫ 1 –¥–µ–Ω—å.\nüõ† –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç?"
    elif "–∑–∞—Ä—è–¥" in text_lower or "—Ä–∞–∑—ä–µ–º" in text_lower or "–ø–æ—Ä—Ç" in text_lower or "–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è" in text_lower:
        reply = f"üîå –ó–∞–º–µ–Ω–∞ —Ä–∞–∑—ä—ë–º–∞ –∑–∞—Ä—è–¥–∫–∏ ‚Äî –æ—Ç 2000 ‚ÇΩ, —Å—Ä–æ–∫ 1 –¥–µ–Ω—å.\nüõ† –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç?"
    else:
        reply = f"üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\nüõ† –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõí –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="order")]])
    await update.message.reply_text(reply, reply_markup=keyboard)

# === Inline-–∫–Ω–æ–ø–∫–∏ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "order":
        USER_CONTEXT[query.from_user.id]["stage"] = "name"
        await query.message.reply_text("‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app_tg = Application.builder().token(TOKEN).build()
    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app_tg.add_handler(CallbackQueryHandler(button_handler))

    threading.Thread(target=run_flask).start()
    app_tg.run_polling()

if __name__ == "__main__":
    main()